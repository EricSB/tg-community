/*!
 \defgroup bfd BFD Support
 \brief API for use with the GNU BFD library. 

 \defgroup configuration Configuration
 \brief API for opdis configuration.
 <p>
 The disassembly functions rely on an \ref opdis_t object to store configuration
 information such as \b libopcodes options and callbacks for use during
 disassembly. It is possible to override much of the default behavior of
 \b libopdis by configuring the \ref opdis_t appropriately.
 <p>
 There are two types of configuration possible: <b>disassembler 
 configuration</b>, which determines the settings used by \b libopcodes, and
 <b>callback configuration</b>, which determines the behavior of \b libopdis.
 <p>
 Disassembler configuration consists of the following functions:
  - \ref opdis_set_arch : Set the BFD machine type and \b print_insn function
    used by \b libopcodes.
  - \ref opdis_set_disassembler_options : Set architecture-specific 
    disassembler options for \b libopcodes.
  - \ref opdis_set_x86_syntax : Set the \b print_insn function to one of the
    two x86 syntaxes supported by \b libopcodes. This is provided for
    convenience.
 <p>
 There are five callbacks used by \b libopdis :
 - \link OPDIS_DISPLAY display \endlink : Invoked to display a disassembled 
   instruction. This can be considered the instruction emitter, though the
   callback is expected to duplicate the instruction if it is stored as the
   instruction pointer passed will be overwritten when the next instruction
   is disassembled. 
 - \link OPDIS_HANDLER handler \endlink : Determine whether disassembly should
   continue. This is used to halt disassembly if an invalid instruction is
   encountered or if an instruction has previously been disassembled.
 - \link OPDIS_RESOLVER resolver \endlink : Find the VMA for the target operand
   of a branch instruction so that control-flow disassembly can be 
   performed on that target. Immediate operand will have their value returned;
   register and address expression operands will require a VM to determine
   their value.
 - \link OPDIS_DECODER decoder \endlink : Generate a \b libopdis instruction
   object from a list of strings emitted by \b libopcodes. This callback
   is responsible for generating all metadata for instructions.
 - \link OPDIS_ERROR error reporter \endlink : Print an error message
   generated by \b libopdis.
 \note The \b opdis_t is not threadsafe: it has no mutexes guarding its
       fields. This is especially a concern with the \ref opdis_insn_buf_t
       filled by \b libopcodes as it disassembles an instruction, and is
       directly the result of the \b libopcodes architecture (which emits
       instructions to a stream). To use \b libopdis across multiple threads,
       a separate \ref opdis_t must be created for each thread.

 \defgroup disassembly Disassembly
 \brief API for disassembly.
 <p>
 The general use of \b libopdis is to create an \ref opdis_t, invoke a
 disassembly function on a buffer, and free the \ref opdis_t:
 \code
	opdis_t o;
        opdis_buf_t buf;

	FILE * f = fopen( "a.out", "r" );
	if ( f ) {
		buf = opdis_buf_read( f, 0, 0 );
		o = opdis_init();
		opdis_disasm_linear( o, buf, 0, 0 );
		opdis_term( o );
		fclose(f);
	}
 \endcode
 More control over the process is generally achieved through \link configuration
 configuration \endlink of the \ref opdis_t.

 \defgroup internal Internal
 \brief Internal types and functions.

 \defgroup model Data Model
 \brief Data Model for disassembled objects.
 <p>
 The \b libopdis data model consist of objects for instructions, operands,
 and operand values.
 <p>
 Each \link opdis_insn_t instruction \endlink consists of \b address details
 (vma, offset, size, bytes), zero or more \b prefixes, a \n mnemonic
 for the machine opcode, and zero or more \b operands. Each \link opdis_op_t
 operand \endlink consists of a \b value which may be a \link opdis_reg_t
 register \endlink, \link opdis_abs_addr_t absolute address \endlink,
 \link opdis_addr_expr_t address expression \endlink, or immediate value.
 <p>
 Instruction, operand, and register objects all have an \b ascii attribute
 that contains the raw output from \b libopcodes for this object. Note that
 \b libopcodes attempts to format its output for objdump, so there may be
 trailing whitespace in the \b ascii fields. 
 <p>
 Instruction and operand objects have a \b category attribute that determines
 the broad type or category of the instruction (e.g. is it a control flow or
 stack operation) or operand (e.g. is it a register or immediate value).
 <p>
 Insructions, operands, and registers also have a \b flags attribute that
 contains additional information. For instructions, this will consist of
 a more detailed operation type (e.g. jump vs call). For operands, this
 will contain usage info (e.g. is the operand an address, is the operand
 read or written, etc). For registers, this will contain general usage
 info about the register (e.g. is it general-purpose, it is a stack pointer,
 etc).

 \defgroup tree Tree
 \brief AVL trees for opdis addresses and instructions.

 \defgroup types Types
 \brief Datatypes used by opdis.

 \defgroup x86 x86 Support
 \brief Built-in support for the x86 architecture.
  <p>
  This consists of two decoders: one each for the Intel and AT&T syntax
  assembly language generated by \b libopcodes.
  <p>
  The AT&T syntax decoder is more suitable for binary analysis, as the
  delimiters used in this syntax (e.g. \b $ and \b *) make it possibly to
  reconstruct more information about the instruction and operands.
*/
